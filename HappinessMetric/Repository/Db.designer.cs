#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HappinessMetric.Repository
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HappinessMetric")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHappinessRating(HappinessRating instance);
    partial void UpdateHappinessRating(HappinessRating instance);
    partial void DeleteHappinessRating(HappinessRating instance);
    #endregion
		
		public DbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HappinessMetricConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<HappinessRating> HappinessRatings
		{
			get
			{
				return this.GetTable<HappinessRating>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HappinessRating")]
	public partial class HappinessRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RatingID;
		
		private string _Project;
		
		private System.Nullable<int> _Sprint;
		
		private string _Developer;
		
		private System.Nullable<short> _HappyRatingwithTeam;
		
		private string _FeelsBest;
		
		private string _FeelsWorst;
		
		private string _IncreaseHappiness;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRatingIDChanging(int value);
    partial void OnRatingIDChanged();
    partial void OnProjectChanging(string value);
    partial void OnProjectChanged();
    partial void OnSprintChanging(System.Nullable<int> value);
    partial void OnSprintChanged();
    partial void OnDeveloperChanging(string value);
    partial void OnDeveloperChanged();
    partial void OnHappyRatingwithTeamChanging(System.Nullable<short> value);
    partial void OnHappyRatingwithTeamChanged();
    partial void OnFeelsBestChanging(string value);
    partial void OnFeelsBestChanged();
    partial void OnFeelsWorstChanging(string value);
    partial void OnFeelsWorstChanged();
    partial void OnIncreaseHappinessChanging(string value);
    partial void OnIncreaseHappinessChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    #endregion
		
		public HappinessRating()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RatingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RatingID
		{
			get
			{
				return this._RatingID;
			}
			set
			{
				if ((this._RatingID != value))
				{
					this.OnRatingIDChanging(value);
					this.SendPropertyChanging();
					this._RatingID = value;
					this.SendPropertyChanged("RatingID");
					this.OnRatingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Project", DbType="VarChar(30)")]
		public string Project
		{
			get
			{
				return this._Project;
			}
			set
			{
				if ((this._Project != value))
				{
					this.OnProjectChanging(value);
					this.SendPropertyChanging();
					this._Project = value;
					this.SendPropertyChanged("Project");
					this.OnProjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sprint", DbType="Int")]
		public System.Nullable<int> Sprint
		{
			get
			{
				return this._Sprint;
			}
			set
			{
				if ((this._Sprint != value))
				{
					this.OnSprintChanging(value);
					this.SendPropertyChanging();
					this._Sprint = value;
					this.SendPropertyChanged("Sprint");
					this.OnSprintChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Developer", DbType="VarChar(100)")]
		public string Developer
		{
			get
			{
				return this._Developer;
			}
			set
			{
				if ((this._Developer != value))
				{
					this.OnDeveloperChanging(value);
					this.SendPropertyChanging();
					this._Developer = value;
					this.SendPropertyChanged("Developer");
					this.OnDeveloperChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HappyRatingwithTeam", DbType="SmallInt")]
		public System.Nullable<short> HappyRatingwithTeam
		{
			get
			{
				return this._HappyRatingwithTeam;
			}
			set
			{
				if ((this._HappyRatingwithTeam != value))
				{
					this.OnHappyRatingwithTeamChanging(value);
					this.SendPropertyChanging();
					this._HappyRatingwithTeam = value;
					this.SendPropertyChanged("HappyRatingwithTeam");
					this.OnHappyRatingwithTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeelsBest", DbType="VarChar(2000)")]
		public string FeelsBest
		{
			get
			{
				return this._FeelsBest;
			}
			set
			{
				if ((this._FeelsBest != value))
				{
					this.OnFeelsBestChanging(value);
					this.SendPropertyChanging();
					this._FeelsBest = value;
					this.SendPropertyChanged("FeelsBest");
					this.OnFeelsBestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeelsWorst", DbType="VarChar(2000)")]
		public string FeelsWorst
		{
			get
			{
				return this._FeelsWorst;
			}
			set
			{
				if ((this._FeelsWorst != value))
				{
					this.OnFeelsWorstChanging(value);
					this.SendPropertyChanging();
					this._FeelsWorst = value;
					this.SendPropertyChanged("FeelsWorst");
					this.OnFeelsWorstChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncreaseHappiness", DbType="VarChar(2000)")]
		public string IncreaseHappiness
		{
			get
			{
				return this._IncreaseHappiness;
			}
			set
			{
				if ((this._IncreaseHappiness != value))
				{
					this.OnIncreaseHappinessChanging(value);
					this.SendPropertyChanging();
					this._IncreaseHappiness = value;
					this.SendPropertyChanged("IncreaseHappiness");
					this.OnIncreaseHappinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
